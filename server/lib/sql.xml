<queries>
	<insert_dataset>
		INSERT dataset 
			(filepath, type, dataset_ref, title, revision, data_url, user_url, creation_date) 
		VALUES
			(':filepath', ':type', ':dataset_ref', ':title', ':revision', ':data_url', ':user_url', now())
	</insert_dataset>
	<select_dataset>
	   SELECT * 
	     FROM dataset
	    WHERE dataset_ref = ':dataset_ref'
	      AND revision = ':revision'
	</select_dataset>
	<insert_geodata>
	    INSERT INTO geodata
	    	(latitude, longitude, dataset_id, creation_date) 
	    VALUES
	    	(:latitude, :longitude, :dataset_id, now());
	</insert_geodata>
	
	<!-- retourne la liste des points dans la zone west/east/north/south -->
	<get_area_geodata>
	    <![CDATA[
	    select geodata.latitude lat, geodata.longitude lng, count(*) nb
	      from geodata
	       where geodata.longitude > :west
	        and geodata.longitude < :east
	        and geodata.latitude < :north
	        and geodata.latitude > :south
	     group by round(geodata.longitude*:tile), round(geodata.latitude*:tile)
	    ]]>
	</get_area_geodata>

		<!-- retourne la liste des points dans la zone west/east/north/south -->
	<get_area_geodata_group>
	    <![CDATA[
	    select round(latitude*:tile)/:tile as lat, 
	           round(longitude*:tile)/:tile as lng, 
	           sum(nb_points) as nb
	      from geodata_group:group
	       where longitude > :west
	        and longitude < :east
	        and latitude < :north
	        and latitude > :south
	     group by round(longitude*:tile), round(latitude*:tile)
	    ]]>
	</get_area_geodata_group>

		<!-- retourne la liste des points dans la zone west/east/north/south filtré par dataset-->
	<get_area_geodata_ds>
	    <![CDATA[
	    select geodata.latitude lat, geodata.longitude lng, count(*) nb
	      from geodata
	       where geodata.longitude > :west
	        and geodata.longitude < :east
	        and geodata.latitude < :north
	        and geodata.latitude > :south
	        and geodata.dataset_id in (:datasets)
	     group by round(geodata.longitude*:tile), round(geodata.latitude*:tile)
	    ]]>
	</get_area_geodata_ds>

  <!-- retourne la liste des points groupé par maille de 1/:tile -->
  <get_geodata>
      <![CDATA[
      select round(geodata.latitude*:tile)/:tile lat, round(geodata.longitude*:tile)/:tile lng, count(*) nb
        from geodata
      group by round(geodata.longitude*:tile), round(geodata.latitude*:tile)
      ]]>
  </get_geodata>
	<!--  retourne la liste des dataset proche de lat/lon-->
	<get_geo_datasets_old>
	    <![CDATA[
            SELECT id, title, avg(lat) lat, avg(lng) lng, data_url, user_url
              FROM (
                            SELECT dataset.id, dataset.title, dataset.data_url, dataset.user_url, geodata.latitude lat, geodata.longitude lng
                              FROM geodata, 
                                   dataset
                             WHERE geodata.dataset_id = dataset.id
                               AND abs(geodata.longitude - :longitude) < :radius
                               AND abs(geodata.latitude - :latitude) < :radius
                             ORDER BY abs(geodata.longitude - :longitude) + abs(geodata.latitude - :latitude) asc
                             LIMIT 1
                     ) A
                   GROUP BY id, title, data_url, user_url
             LIMIT :limit
	     ]]>
	</get_geo_datasets_old>
	
	<get_geo_datasets>
		<![CDATA[
			SELECT id, 
			       title, 
			       SUBSTRING_INDEX(GROUP_CONCAT(lat order by ord),',',1) as lat, 
			       SUBSTRING_INDEX(GROUP_CONCAT(lng order by ord) ,',',1) as lng, 
			       data_url, 
			       user_url
			FROM (
				SELECT dataset.id as id, 
		           dataset.title as title, 
		           dataset.data_url as data_url, 
		           dataset.user_url as user_url, 
		           geodata.latitude as lat, 
		           geodata.longitude as lng, 
		           abs(geodata.longitude - :longitude) + abs(geodata.latitude - :latitude) as ord
				  FROM geodata, 
						   dataset
				 WHERE geodata.dataset_id = dataset.id
				   AND abs(geodata.longitude - :longitude) < :radius
				   AND abs(geodata.latitude - :latitude) < :radius
				 ORDER BY abs(geodata.longitude - :longitude) + abs(geodata.latitude - :latitude) asc
				 LIMIT 100
			) as x
			GROUP BY id, title, data_url, user_url
			limit :limit
		]]>
	</get_geo_datasets>
	<!-- retourne la liste des dataset dont le nom cotien name -->
	<get_ajax_dataset>
	    SELECT DISTINCT dataset.id, dataset.name 
	      FROM dataset
	     WHERE name LIKE '%:name%'
	     ORDER BY name
	</get_ajax_dataset>
	
	<!-- user buisness -->
	<select_user>
		select users.*
		  from vuparvous.users
		 where users.login = ':login'
	</select_user>
	<update_user>
		UPDATE vuparvous.users
		   SET password   = coalesce(':password'  , password ),
		       email      = coalesce(':email'     , email ),
		       first_name = coalesce(':first_name', first_name ),
		       last_name  = coalesce(':first_name', last_name )
		 WHERE login = ':login'
	</update_user>
	<insert_user>
		INSERT INTO vuparvous.users set ?
	</insert_user>

	
	<update_user_vote>
		INSERT vuparvous.votes 
			(user_login, photo_id, vote_insolite, vote_qualite, vote_date) 
		VALUES
			(':login',':photo_id', :vote_insolite, :vote_qualite, now()) 
		ON DUPLICATE KEY UPDATE 
			vote_insolite=:vote_insolite, 
			vote_qualite=:vote_qualite,
			vote_date = now();
	</update_user_vote>
	<update_user_visit>
		INSERT vuparvous.visits 
			(user_login, site_id, visit_date) 
		VALUES
			(':login',':site_id', now()) 
		ON DUPLICATE KEY UPDATE 
			visit_date = now();
	</update_user_visit>
	<insert_photo>
		INSERT INTO vuparvous.photos 
			(auteur, site_id, filename, score_insolite, score_qualite, commentaire)
		VALUES
		    (':auteur',':site_id',':filename',0,0,':commentaire')
	</insert_photo>
</queries>
